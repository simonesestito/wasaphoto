openapi: 3.0.3
info:
  title: WASAPhoto API Specification
  description: |
    This OpenAPI document describes the WASAPhoto project REST API.

    Keep in touch with your friends by sharing photos of special moments,
    thanks to WASAPhoto! Directly from your PC,
    you can upload your photos, and they will be visible to everyone
    who is following you.

    Project details at [https://gamificationlab.uniroma1.it/notes/Project.pdf]()
  version: "1"
paths:
  /sessions:
    post:
      tags: [ "login" ]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { $ref: "#/components/schemas/User" }
      responses:
        '200':
          description: User log-in action successful, user already exists
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        '201':
          description: |
            User log-in action successful,
            user didn't exist and it has just been created.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }

  /users/{id}:
    description: Actions performed on a single user, identified by the given ID
    parameters:
      - { $ref: "#/components/parameters/UserId" }
    put:
      tags: [ "user" ]
      operationId: setMyUserName
      summary: Update a user's details
      description: Update user details like name, surname, username, etc
      requestBody:
        description: Fields to update on an existing user
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: User fields have been updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: User with given ID doesn't exist and wasn't created
        "409":
          description: A user with the requested new username already exists
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
        "403": { $ref: "#/components/responses/AuthorizationError" }
      security:
        - UserIdAuth: [ ]
    get:
      tags: [ "user" ]
      operationId: getUserProfile
      summary: Get user's profile details
      description: |
        Get user's profile details,
        including the list of his/her photos, paginated.
      responses:
        "200":
          description: Get details about this user's profile
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: User with given ID doesn't exist
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
  
  /users/{id}/followers:
    description: Actions on someone's followers
    parameters:
      - { $ref: "#/components/parameters/UserId" }
    post:
      tags: [ "user" ]
      operationId: followUser
      summary: Follow a user
      description: |
        Add yourself as a follower of the user
        identified by the ID in the path.
      responses:
        "200":
          description: You are now following this user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: A user with this ID doesn't exist
        "409":
          description: You already follow this user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
      security:
        - UserIdAuth: [ ]
    delete:
      tags: [ "user" ]
      operationId: unfollowUser
      summary: Unfollow a user
      description: |
        Remove yourself as a follower
        of the user identified by the ID in the path.
      responses:
        "200":
          description: You are not following this user anymore, or you wasn't following him/her in the first place
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: A user with this ID doesn't exist
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
      security:
        - UserIdAuth: [ ]

  /photos:
    description: Photos collection
    post:
      tags: [ "photo" ]
      operationId: uploadPhoto
      summary: Upload photo
      description: |
        Upload a new photo to your personal account.
        The photo image file must have been previously uploaded,
        here you can pass the file ID.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Photo" }
      responses:
        "201":
          description: The post was created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        "400":
          description: |
            The photo didn't exist. Make sure to upload it first.
            Otherwise, the data sent was not compliant with the documentation.
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
      security:
        - UserIdAuth: [ ]

  /photos/{id}:
    parameters:
      - { $ref: "#/components/parameters/PhotoId" }
    delete:
      tags: [ "photo" ]
      operationId: deletePhoto
      summary: Delete a photo
      description: |
        Delete an existing published post.
        A user can only delete his own photos.
      responses:
        "204":
          description: The post was deleted
        "404":
          description: The post doesn't exist
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
        "403": { $ref: "#/components/responses/AuthorizationError" }
      security:
        - UserIdAuth: [ ]

  /photoFiles:
    description: Photo files collection
    post:
      tags: [ "files" ]
      operationId: uploadPhotoFile
      summary: Upload the file of a photo
      description: |
        Upload the file of a photo you are going to use
        in a post that will be published very soon,
        presumably that the user is writing right now.
        The server could decide to delete this file automatically
        after a variable amount of time, if not used in any post.
      requestBody:
        required: true
        description: The binary image file to upload
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        "201":
          description: The image was successfully uploaded and elaborated
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoId: { $ref: "#/components/schemas/FileId" }
        "415":
          description: The file sent cannot be processed as an image
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
      security:
        - UserIdAuth: [ ]

  /photoFiles/{id}:
    description: A single photo file
    parameters:
      - {$ref: "#/components/parameters/PhotoFileId"}
    get:
      tags: [ "files" ]
      operationId: downloadPhotoFile
      summary: Get a photo file
      description: |
        Download the file of an existing photo.
        Simple caching is allowed because the file at a given ID 
        is guaranteed to never change. At most it can be deleted.
      responses:
        "200":
          description: An image file with the given ID was found and it's stored on this server
          content:
            image/webp:
              schema:
                type: string
                format: binary
                description: The image as a binary compressed WEBP file
        "301":
          description: |
            An image file with the given ID was found, but it's stored somewhere else,
            such as a CDN or another dedicated server for static resources.
          headers:
            Location:
              description: The URL where the image file can be download from
              schema:
                type: string
                format: uri
        "404":
          description: |
            An image file with the given ID cannot be found
            neither on this nor on other servers.
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }

  /photos/{id}/likes:
    parameters:
      - { $ref: "#/components/parameters/PhotoId" }
    post:
      tags: [ "photo" ]
      operationId: likePhoto
      summary: Like a photo
      description: Leave a like on a photo
      responses:
        "200":
          description: Your like was added
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        "404":
          description: A post with this ID doesn't exist
        "409":
          description: You already liked this post
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
      security:
        - UserIdAuth: [ ]
    delete:
      tags: [ "photo" ]
      operationId: unlikePhoto
      summary: Unlike a photo
      description: Remove a like from a photo
      responses:
        "200":
          description: Your like was removed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        "404":
          description: A post with this ID doesn't exist
        "409":
          description: You didn't like this post in the first place
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
      security:
        - UserIdAuth: [ ]
        
components:
  parameters:
    UserId:
      name: id
      required: true
      in: path
      description: The unique ID of a user
      schema: { $ref: "#/components/schemas/ResourceId" }
    PhotoId:
      name: id
      required: true
      in: path
      description: The unique ID of a post, not the image file directly
      schema: { $ref: "#/components/schemas/FileId" }
    PhotoFileId:
      name: id
      description: The ID of an image file
      required: true
      in: path
      schema: { $ref: "#/components/schemas/ResourceId" }

  responses:
    BadRequest:
      description: |
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    ServerError:
      description: |
        An unexpected error occurred on the server
        while processing this request.
    LoginError:
      description: |
        Authentication is required to perform this action,
        and no *valid* authentication was included in this request.
    AuthorizationError:
      description: |
        A valid authentication is included in this request,
        but you are not authorized to perform this action.

  schemas:
    ResourceId:
      description: The unique resource ID as a UUID string
      type: string
      example: "123e4567-e89b-12d3-a456-426614174000"
      readOnly: true

    User:
      description: |
        Representation of a user, with all the details useful in his/her profile.
        It won't directly include his/her photos, because they must be
        requested separately, using pagination.
      type: object
      properties:
        id: { $ref: "#/components/schemas/ResourceId" }
        name:
          description: User's name
          type: string
          example: John
        surname:
          description: User's surname
          type: string
          example: Doe
        username:
          description: User's personal and unique username
          type: string
          example: john_doe_42
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        followersCount:
          description: Total count of the followers of a user
          type: integer
          readOnly: true
          minimum: 0
          example: 500
        followingsCount:
          description: Total count of the followings of a user
          type: integer
          readOnly: true
          minimum: 0
          example: 80
        postsCount:
          description: Total count of the posts of a user
          type: integer
          readOnly: true
          minimum: 0
          example: 12

    DateTime:
      description: Standard datetime representation
      type: string
      example: 2017-07-21T17:32:28Z
      readOnly: true
    
    Photo:
      description: |
        A photo post, with aggregate information about likes and comments.
        Detailed comments can be requested separately using an appropriate paginated endpoint.
      type: object
      properties:
        id: { $ref: "#/components/schemas/ResourceId" }
        imageId: { $ref: "#/components/schemas/FileId" }
        author: { $ref: "#/components/schemas/User" }
        publishDate: { $ref: "#/components/schemas/DateTime" }
        likesCount:
          description: Total count of the likes this post received
          type: integer
          minimum: 0
          example: 1200
        commentsCount:
          description: Total count of the comments this post received
          type: integer
          minimum: 0
          example: 300
    FileId:
      description: The unique ID of a file
      type: string
      example: 162b0b32f02482d5aca0a7c93dd03cea3acd7

  securitySchemes:
    UserIdAuth:
      description: |
        User authentication with the user ID passed
        as it would be an authentication token.
        Of course, that's extremely insecure, but it's done 
        according to the project specification.
      type: http
      scheme: bearer