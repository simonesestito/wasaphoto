openapi: 3.0.3
info:
  title: WASAPhoto API Specification
  description: |
    This OpenAPI document describes the WASAPhoto project REST API.

    Keep in touch with your friends by sharing photos of special moments,
    thanks to WASAPhoto! Directly from your PC,
    you can upload your photos, and they will be visible to everyone
    who is following you.

    Project details at [https://gamificationlab.uniroma1.it/notes/Project.pdf]()
  version: "1"
paths:
  /sessions:
    post:
      tags: [ "login" ]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { $ref: "#/components/schemas/User" }
      responses:
        '200':
          description: User log-in action successful, user already exists
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        '201':
          description: |
            User log-in action successful,
            user didn't exist and it has just been created.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }

  /users/{id}:
    description: Actions performed on a single user, identified by the given ID
    parameters:
      - { $ref: "#/components/parameters/UserId" }
    put:
      tags: [ "user" ]
      operationId: setMyUserName
      summary: Update a user's details
      description: Update user details like name, surname, username, etc
      requestBody:
        description: Fields to update on an existing user
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: User fields have been updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: User with given ID doesn't exist and wasn't created
        "409":
          description: A user with the requested new username already exists
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
        "403": { $ref: "#/components/responses/AuthorizationError" }
      security:
        - UserIdAuth: [ ]
    get:
      tags: [ "user" ]
      operationId: getUserProfile
      summary: Get user's profile details
      description: |
        Get user's profile details,
        including the list of his/her photos, paginated.
      responses:
        "200":
          description: Get details about this user's profile
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: User with given ID doesn't exist
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
  
  /users/{id}/followers:
    description: Actions on someone's followers
    parameters:
      - { $ref: "#/components/parameters/UserId" }
    post:
      tags: [ "user" ]
      operationId: followUser
      summary: Follow a user
      description: |
        Add yourself as a follower of the user
        identified by the ID in the path.
      responses:
        "200":
          description: You are now following this user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: A user with this ID doesn't exist
        "409":
          description: You already follow this user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
      security:
        - UserIdAuth: [ ]
    delete:
      tags: [ "user" ]
      operationId: unfollowUser
      summary: Unfollow a user
      description: |
        Remove yourself as a follower
        of the user identified by the ID in the path.
      responses:
        "200":
          description: You are not following this user anymore, or you wasn't following him/her in the first place
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "404":
          description: A user with this ID doesn't exist
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/ServerError" }
        "401": { $ref: "#/components/responses/LoginError" }
      security:
        - UserIdAuth: [ ]

components:
  parameters:
    UserId:
      name: id
      required: true
      in: path
      description: The unique ID of a user
      schema: { $ref: "#/components/schemas/ResourceId" }

  responses:
    BadRequest:
      description: |
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    ServerError:
      description: |
        An unexpected error occurred on the server
        while processing this request.
    LoginError:
      description: |
        Authentication is required to perform this action,
        and no *valid* authentication was included in this request.
    AuthorizationError:
      description: |
        A valid authentication is included in this request,
        but you are not authorized to perform this action.

  schemas:
    ResourceId:
      description: The unique resource ID as a UUID string
      type: string
      example: "123e4567-e89b-12d3-a456-426614174000"
      readOnly: true

    User:
      description: |
        Representation of a user, with all the details useful in his/her profile.
        It won't directly include his/her photos, because they must be
        requested separately, using pagination.
      type: object
      properties:
        id: { $ref: "#/components/schemas/ResourceId" }
        name:
          description: User's name
          type: string
          example: John
        surname:
          description: User's surname
          type: string
          example: Doe
        username:
          description: User's personal and unique username
          type: string
          example: john_doe_42
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        followersCount:
          description: Total count of the followers of a user
          type: integer
          readOnly: true
          minimum: 0
          example: 500
        followingsCount:
          description: Total count of the followings of a user
          type: integer
          readOnly: true
          minimum: 0
          example: 80
        postsCount:
          description: Total count of the posts of a user
          type: integer
          readOnly: true
          minimum: 0
          example: 12

  securitySchemes:
    UserIdAuth:
      description: |
        User authentication with the user ID passed
        as it would be an authentication token.
        Of course, that's extremely insecure, but it's done 
        according to the project specification.
      type: http
      scheme: bearer